@model BlueHrLib.Data.User
@using BlueHrWeb.Helpers.View
@{
    bool canDeleted = MenuAuthHelper.CanShow("User", "Deleted");
}

<input type="hidden" id="can" value="@canDeleted.ToString()">

<div id="user" style="margin:20px;">
    <ol class="breadcrumb current-position">
        您的位置：
        <li>@Html.ActionLink("用户管理", "Index")</li>
        <li>{{action}}</li>
    </ol>
    <hr class="hr-grey" />
    @using (Ajax.BeginForm(new AjaxOptions { HttpMethod = "Post", OnSuccess = "Success" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        if (Model != null)
        {
            @Html.HiddenFor(model => model.id)
        }

        <div class="marco-npanel-primary">
            <div class="marco-nheading">
                {{action}}  <!--编辑用户-->
                <div class="pull-right">
                    <button type="submit" class="marco-btn-primary" style="margin-top:-10px; padding: 0 10px;">
                        <i class="fa fa-check-circle-o"></i>
                        <span>{{actionBtn}}</span> <!--更新-->
                    </button>
                </div>
            </div>
            <div class="marco-nbody row">
                <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                    <div class="marco-igroup-primary">
                        <label for="name">姓名*</label>
                        @if (Model != null)
                        {
                            @Html.EditorFor(model => model.name)
                        }
                        else
                        {
                            <input type="text" name="name" placeholder="姓名" />
                        }
                    </div>
                </div>
                <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                    <div class="marco-igroup-primary">
                        <label for="email">邮箱*</label>
                        @if (Model != null)
                        {
                            @Html.EditorFor(model => model.email)
                        }
                        else
                        {
                            <input type="text" name="email" placeholder="邮箱地址" />
                        }
                    </div>
                </div>
                @if (Model == null)
                {
                    <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12" id="password">
                        <div class="marco-igroup-primary">
                            <label for="pwd">密码*</label>
                            
                            <input type="text" name="pwd" placeholder="密码" />
                            
                        </div>
                    </div>
                }
                
                <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                    <div class="row">
                        <div class="col-lg-8 col-md-8 col-sm-12 col-xs-12">
                            <div class="marco-igroup-primary">
                                <label for="role">角色*</label>
                                @if (Model != null && !string.IsNullOrEmpty(Model.roleStr))
                                {
                                    <input type="text" name="role" id="role" hidden="hidden" value="@Model.role" />
                                    <input type="text" name="roleStr" style="text-align:left" id="roleStr" placeholder="" readonly="readonly" value="@Model.roleStr" />
                                }
                                else
                                {
                                    <input type="text" name="role" id="role" hidden="hidden" />
                                    <input type="text" name="roleStr" style="text-align:left" id="roleStr" placeholder="" readonly="readonly" />
                                }
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12">
                            @if (Model != null)
                            {
                                <button class="marco-btn-primary" style="padding:8px;" title="确定" type="button" id="asignRole" onclick="asignRoleConfirm(@Model.id)">
                                    分配角色
                                </button>
                            }
                            else
                            {
                                <button class="marco-btn-primary" style="padding:8px;" title="确定" type="button" id="asignRole" onclick="asignRoleConfirm(-1)">
                                    分配角色
                                </button>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                    <div class="marco-igroup-primary">
                        <label for="pwd">权限公司</label>
                        @if (Model != null && !string.IsNullOrEmpty(Model.AuthCompany))
                        {
                            <input type="text" name="authCompany" id="authCompany" placeholder="" value="@Model.AuthCompany" readonly="readonly" />
                        }
                        else
                        {
                            <input type="text" name="authCompany" id="authCompany" placeholder="" readonly="readonly" />
                        }
                    </div>
                </div>
                <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                        <div class="marco-igroup-primary">
                            <label for="pwd">权限部门</label>
                            @if (Model != null && !string.IsNullOrEmpty(Model.AuthDepartment))
                            {
                                <input type="text" name="authDep" id="authDep" placeholder="" value="@Model.AuthDepartment" readonly="readonly" />
                            }
                            else
                            {
                                <input type="text" name="authDep" id="authDep" placeholder="" readonly="readonly" />
                            }

                            <span>
                                @if (Model != null)
                                {
                                    <button class="marco-btn-primary" style="margin:0;" title="确定" type="button" id="asignCmpDep" onclick="asignCmpDepConfirm(@Model.id)">
                                        公司和部门
                                    </button>
                                }
                                else
                                {
                                    <button class="marco-btn-primary" style="margin:0;" title="确定" type="button" id="asignCmpDep" onclick="asignCmpDepConfirm(-1)">
                                        公司和部门
                                    </button>
                                }
                            </span>    
                    </div>
                </div>
            </div>
        </div>
        <div hidden="hidden">
            @*<input type="text" id="selCompanys" name="selCompanys" value="@ViewBag.TheCmpIds" />
                <input type="text" id="selDeparts" name="selDeparts" value="@ViewBag.TheDepIds" />*@
            <input type="text" id="selCmpDepIds" name="selCmpDepIds" value="@ViewBag.TheCmpDepIds" />
            <input type="text" id="selCmpDepNames" name="selCmpDepNames" value="@ViewBag.TheSelCmpDepNames" />
        </div>
    }
</div>
<div id="approval_content" class="import_content" style="display:none;">
    <div class="dialogModal_header" style="background:steelblue;color:white;">
        分配角色
    </div>
    <div class="dialogModal_content">
        <div class="marco-nbody row">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                <div class="marco-igroup-primary">
                    <span>角色列表</span>
                    <select class="roleCls" id="roleList" name="roleList">
                        @{
                            foreach (var item in (ViewData["SysRoleList"] as IEnumerable<SelectListItem>))
                            {
                                <option value="@item.Value" title="@item.Text">@item.Text</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4">
                <button class="marco-btn-primary " title="确定" type="button" id="confirmAsign" onclick="theconfirmAsign()">
                    确定
                </button>
            </div>
        </div>
    </div>
</div>

<!--公司和部门弹出框-->
<div class="modal inmodal fade" id="myModal6" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <p class="modal-title">选择权限公司和部门</p>
            </div>

            <div class="modal-body">
                <div class="row">
                    <div class="col col-lg-4">
                        <div id="cmpTree"></div>
                    </div>
                    <div class="col col-lg-8">
                        <div id="depTree"></div>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button id="btnEdit3" class="btn btn-primary" style="border-radius:3px;">确认</button>
            </div>

        </div>
    </div>
</div>

<script type="text/javascript">
    Layout.init();
    var cmpList = [];

    //控制textarea高度
    $('textarea').css({ height: ($(window).height() - 400) / 2 + 'px' });
    $(window).resize(function () {
        $('textarea').css({ height: ($(window).height() - 400) / 2 + 'px' });
    });


    //审核
    function asignRoleConfirm(id) {
        $('#approval_content').dialogModal({
            onOkBut: function () {

             },
            onCancelBut: function () {
                
             },
            onLoad: function () {
                var theSel = $("#role").val();
                if (theSel != "" && theSel != undefined && theSel != null) {
                    $(".roleCls:last").find("option[value='" + theSel + "']").attr("selected", true);
                }
            },
            onClose: function () { }
        });
    }

    $("#btnEdit3").click(function () {

        var theIds = "";
        var theCmpNames = "";//所有公司列表
        var theDepNameList = "";//所有部门列表

        for (var i = 0; i < cmpList.length; i++) {

            theCmpNames += cmpList[i].cmpName + ",";

            var tmp = "";
            var depTmpIds = "";

            var deps = cmpList[i].deps;

            for (var k = 0; k < deps.length; k++) {
                depTmpIds += deps[k].depId + ",";
                theDepNameList += deps[k].depName + ",";
            }

            tmp += cmpList[i].cmpId + "|";
            tmp += depTmpIds;
            theIds += tmp + ";";//数据库传入参数
        }

        $("#authCompany").val(theCmpNames);//页面显示
        $("#authDep").val(theDepNameList);//页面显示
        $("#selCmpDepIds").val(theIds);//数据库传入参数

        //公司ID|部门ID,;
        //1|2,1,4,;3|7,;4|5,;5|6,8,;
        //console.log(theIds);
        $('#myModal6').modal('hide');
    });

    function theconfirmAsign() {
        var RoleName = $('.roleCls:last').find("option:selected").text();
        var RoleId = $('.roleCls:last').find("option:selected").val();

        if (RoleName == null || RoleName == "") {
            Layout.popMsg('popMsg-danger', "请选择角色！");
            return;
        }
        else {
            $("#roleStr").val(RoleName);
            $("#role").val(RoleId);
        }

        $('#approval_content').dialogModal("hide");
    }

    bindCompany();

    //公司和部门
    function asignCmpDepConfirm(id) {
        $('#myModal6').modal('show');
    }

    //公司是否存在列表
    function ifCmpSelected(id) {
        var k = 0;
        for (var i = 0; i < cmpList.length; i++) {
            if (cmpList[i].cmpId == id) {
                k++;
            }
        }

        return k > 0;
    }

    //部门是否存在列表
    function ifDepSelected(cmpId, id) {
        var k = 0;
        for (var i = 0; i < cmpList.length; i++) {
            if (cmpList[i].cmpId == cmpId) {

                var depsTmp = cmpList[i].deps;

                for (var m = 0; m < depsTmp.length; m++) {
                    if (depsTmp[m].depId == id) {
                        k++;
                    }
                }

            }
        }

        return k > 0;
    }

    //添加部门
    function pushDeps(cmpId, selNode) {
        for (var i = 0; i < cmpList.length; i++) {
            if (cmpList[i].cmpId == cmpId) {

                var depsTmp = cmpList[i].deps;
                var isSel = ifDepSelected(cmpId, selNode.depId);

                if (!isSel) {
                    cmpList[i].deps.push(selNode);
                }
            }
        }
    }

    function RinTheValues() {
        if (cmpList.length <= 0) {
            cmpList = [];
            var theBindComDep = $("#selCmpDepNames").val();

            theBindComDep.split(';').forEach(function (item, index) {

                var singleCmp = item.split('|');

                if (singleCmp.length > 0 || singleCmp.length > 1) {

                    if (singleCmp[0] != "" && singleCmp[0] != null) {

                        var ab = singleCmp[0].split('&');

                        if (ab[0] != null && ab[0] != "") {
                            var cmpSelNode = {};
                            cmpSelNode.cmpId = ab[0];
                            cmpSelNode.cmpName = ab[1];
                            cmpSelNode.deps = [];

                            if (singleCmp.length > 1) {
                                singleCmp[1].split(",").forEach(function (item1, index1) {

                                    if (item1 != "" && item1 != null) {

                                        var txkf = item1.split('&');

                                        if (txkf[0] != "" && txkf[0] != null) {

                                            var depSelNode = {};
                                            depSelNode.depId = txkf[0];
                                            depSelNode.depName = txkf[1];

                                            cmpSelNode.deps.push(depSelNode);
                                        }
                                    }
                                });
                            }

                            cmpList.push(cmpSelNode);
                        }
                    }
                }


                //1|1,2,4,
                //console.log("the bind value");
                //console.log(theBindComDep);

                //console.log(cmpList);
            });
        }
    }

    function reBindCompany() {
        var allNodes = $('#cmpTree').treeview('getUnselected');

        for (var tm = 0; tm < allNodes.length; tm++) {
            for (var i = 0; i < cmpList.length; i++) {
                if (cmpList[i].cmpId == allNodes[tm].id) {
                    $('#cmpTree').treeview('checkNode', [allNodes[tm].nodeId, { silent: true }]);
                }
            }
        }

        //bind default deptree
        var allSelNodes = $('#cmpTree').treeview('getChecked');

        if (allSelNodes.length > 0) {
            bindDepTree(allSelNodes[0].id);
        }
    }

    function reBindDepartment(cmpId) {
        for (var i = 0; i < cmpList.length; i++) {

            if (cmpList[i].cmpId == cmpId) {

                var deps = cmpList[i].deps;

                var allDepNodes = $('#depTree').treeview('getUnselected');

                for (var m = 0; m < allDepNodes.length; m++) {
                    for (var kk = 0; kk < deps.length; kk++) {

                        if (deps[kk].depId == allDepNodes[m].id) {

                            $('#depTree').treeview('checkNode', [allDepNodes[m].nodeId, { silent: true }]);
                        }
                    }
                }
            }
        }
    }

    function bindCompany() {

        RinTheValues();

        $.post("/User/GetCompanys", {}, function (response) {

            if (response == "empty_result") {
                $('#cmpDep_content').dialogModal("hide");
                Layout.popMsg('popMsg-danger', "公司初始化错误！");
                return false;
            }
            else {
                $('#cmpTree').treeview({
                    data: response,         // 数据源
                    showCheckbox: true,   //是否显示复选框
                    highlightSelected: true,    //是否高亮选中
                    //nodeIcon: 'glyphicon glyphicon-user',    //节点上的图标
                    //nodeIcon: 'glyphicon glyphicon-globe',
                    emptyIcon: '',    //没有子节点的节点图标
                    multiSelect: false,    //多选
                    onNodeChecked: function (event, data) {
                        bindDepTree(data.id);

                        //check if selected
                        var isSel = ifCmpSelected(data.id);

                        if (!isSel) {
                            var cmpSelNode = {};
                            cmpSelNode.cmpId = data.id;
                            cmpSelNode.cmpName = data.text;
                            cmpSelNode.deps = [];
                            cmpList.push(cmpSelNode);
                        }
                    },

                    //未选中
                    onNodeUnchecked: function (event, data) {
                        var delKey = data.id;
                        for (var i = 0; i < cmpList.length; i++) {
                            var keyTemp = cmpList[i].cmpId;
                            if (keyTemp === delKey) {
                                cmpList.splice(i, 1);
                            }
                        }
                    },

                    onNodeSelected: function (event, data) {
                        bindDepTree(data.id);
                    }
                });

                reBindCompany();
            }
        });
    }

    function bindDepTree(cmpId) {
        $.post("/User/GetDepartmentsByCompany", { companyId: cmpId }, function (response) {

            if (response == "empty_result") {
                $('#cmpDep_content').dialogModal("hide");
                Layout.popMsg('popMsg-danger', "部门初始化错误！");
                return false;
            }
            else {
                $('#depTree').treeview({
                    data: response,         // 数据源
                    showCheckbox: true,   //是否显示复选框
                    highlightSelected: true,    //是否高亮选中
                    //nodeIcon: 'glyphicon glyphicon-user',    //节点上的图标
                    //nodeIcon: 'glyphicon glyphicon-globe',
                    emptyIcon: '',    //没有子节点的节点图标
                    multiSelect: true,    //多选
                    onNodeChecked: function (event, data) {

                        console.log(data);

                        var isSel = ifDepSelected(cmpId, data.id);

                        if (!isSel) {
                            var depSelNode = {};
                            depSelNode.depId = data.id;
                            depSelNode.depName = data.text;
                            pushDeps(cmpId, depSelNode);
                        }

                        //选中所有子节点
                        if (data.nodes != null && data.nodes.length > 0) {
                            for (var xxk = 0; xxk < data.nodes.length; xxk++) {

                                $('#depTree').treeview('checkNode', [data.nodes[xxk].nodeId, { silent: true }]);

                                var isSel = ifDepSelected(cmpId, data.nodes[xxk].id);

                                if (!isSel) {
                                    var depSelNode = {};
                                    depSelNode.depId = data.nodes[xxk].id;
                                    depSelNode.depName = data.nodes[xxk].text;
                                    pushDeps(cmpId, depSelNode);
                                }

                                checknode(cmpId,data.nodes[xxk].nodes);
                            }
                        }
                    },

                    onNodeSelected: function (event, data) { },

                    //未选中
                    onNodeUnchecked: function (event, data) {

                        var delKey = data.id;
                        for (var i = 0; i < cmpList.length; i++) {

                            if (cmpList[i].cmpId == cmpId) {
                                var depsTmp = cmpList[i].deps;

                                for (var mm = 0; mm < depsTmp.length; mm++) {
                                    if (depsTmp[mm].depId == data.id) {
                                        cmpList[i].deps.splice(mm, 1);
                                    }
                                }
                            }
                        }

                        //取消所有子节点
                        if(data.nodes!=null&&data.nodes.length>0)
                        {
                            for (var xxk = 0; xxk < data.nodes.length; xxk++) {

                                $('#depTree').treeview('uncheckNode', [data.nodes[xxk].nodeId, { silent: true }]);

                                var delKey = data.nodes[xxk].id;
                                for (var i = 0; i < cmpList.length; i++) {

                                    if (cmpList[i].cmpId == cmpId) {
                                        var depsTmp = cmpList[i].deps;

                                        for (var mm = 0; mm < depsTmp.length; mm++) {
                                            if (depsTmp[mm].depId == data.nodes[xxk].id) {
                                                cmpList[i].deps.splice(mm, 1);
                                            }
                                        }
                                    }


                                }

                                unchecknode(cmpId,data.nodes[xxk].nodes);

                            }
                        }
                    }
                });

                reBindDepartment(cmpId);
            }
        });
    }

    function checknode(cmpId,nodes) {
        if (nodes != null && nodes.length > 0) {
        

            for (var xxxk = 0; xxxk < nodes.length; xxxk++) {

                $('#depTree').treeview('checkNode', [nodes[xxxk].nodeId, { silent: true }]);

                var isSel = ifDepSelected(cmpId, nodes[xxxk].id);

                if (!isSel) {
                    var cdepSelNode = {};
                    cdepSelNode.depId = nodes[xxxk].id;
                    cdepSelNode.depName = nodes[xxxk].text;
                    pushDeps(cmpId, cdepSelNode);
                }

                checknode(cmpId, nodes[xxxk].nodes);
            }


        }

    }

    function unchecknode(cmpId,nodes) {
        if (nodes != null && nodes.length > 0) {
            for (var xxxk = 0; xxxk < nodes.length; xxxk++) {
                $('#depTree').treeview('uncheckNode', [nodes[xxxk].nodeId, { silent: true }]);

                var delKey = nodes[xxxk].id;
                for (var i = 0; i < cmpList.length; i++) {

                    if (cmpList[i].cmpId == cmpId) {
                        var depsTmp = cmpList[i].deps;

                        for (var mm = 0; mm < depsTmp.length; mm++) {
                            if (depsTmp[mm].depId == nodes[xxxk].id) {
                                cmpList[i].deps.splice(mm, 1);
                            }
                        }
                    }


                }

                unchecknode(cmpId, nodes[xxxk].nodes);
            }
        }
    }
</script>
