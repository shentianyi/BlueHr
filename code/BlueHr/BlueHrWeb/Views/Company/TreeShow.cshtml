@{
    ViewBag.Title = "公司组织架构";
}

<ol class="breadcrumb current-position" style="margin-top:10px;">
    您的位置：
    <li>公司管理</li>
    <li>公司组织架构</li>
</ol>

<hr class="hr-grey" />

<div class="row" style="margin: 0 10px; 0 10px">
    <div class="col-lg-3 col-md-3 col-xs-6 col-sm-6">
        <button id="zoomToFit" class="marco-btn-primary">显示全部</button>
        <button id="centerRoot" class="marco-btn-primary">根节点</button>
    </div>
    <div class="col-lg-3 col-md-3 col-xs-6 col-sm-6">
        <div class="marco-igroup-primary" style="width: 200px;">
            <span>公司</span>
            @Html.DropDownList("companyId", ViewData["companyList"] as IEnumerable<SelectListItem>)
        </div>
    </div>
</div>

<div class="OrganizationShow" style="margin：0 10px 0 10px;"></div>

<script type="text/javascript">
    Layout.init();

    LoadOrganization();
    
    $("#companyId").change(function(){
        LoadOrganization();
    })

    function  LoadOrganization(){
    $.ajax({
            url: '/Company/CompanyOrganization',
            type: 'get',
            data: {
                companyId: $("#companyId").val()
            },
            success: function (data) {
                init(data);
            },
            error: function () {
                console.log("CCCCCCCCCCCVEroor")
            }
        })
    }

    function init(data) {
        $("#myOverviewDiv").remove();
        $("#myDiagramDiv").remove();

        var Html = "<span style='font-size: 14px; font-family: 黑体; position:absolute; top: 120px; right: 40px;'>缩略图</span>" +
        "<div id='myOverviewDiv' style='font-size: 20px; height: 100px;'></div>"+
        "<div id='myDiagramDiv' style='background-color: white; border-radius: 10px; width: 100%;'></div>"; 
        $(Html).appendTo($(".OrganizationShow"));
        
        $("#myDiagramDiv").css("height", $(window).height()-300+'px');
        
        var Go_Comany = go.GraphObject.make;  // for conciseness in defining templates

        myDiagram =
          Go_Comany(go.Diagram, "myDiagramDiv",  // must be the ID or reference to div
            {
                initialDocumentSpot: go.Spot.TopCenter,
                initialViewportSpot: go.Spot.TopCenter,
                "toolManager.hoverDelay": 100,  // 100 milliseconds instead of the default 850
                allowCopy: false,
                allowMove:false,
                // nodeSelectionAdornmentTemplate:
                // Go_Comany(go.Adornment, "Auto",
                //     { layerName: "Grid" },  // the predefined layer that is behind everything else
                //     Go_Comany(go.Shape, "Circle", { fill: "yellow", stroke: null }),
                //     Go_Comany(go.Placeholder)
                // ),
                layout:
                  Go_Comany(go.TreeLayout,
                    {
                        angle: 90, nodeSpacing: 10, layerSpacing: 40
                        //layerStyle: go.TreeLayout.LayerUniform
                    })
            });

        var bluegrad = '#90CAF9';
        var pinkgrad = '#F48FB1';

        function tooltipTextConverter(department) {
            var str = "";
            str += "名称: " + department.name;
            if (department.remark !== undefined) str += "\n 备注: " + department.remark;
            return str;
        }

        var tooltiptemplate =
          Go_Comany(go.Adornment, "Auto",
            Go_Comany(go.Shape, "RoundedRectangle",
              { fill: "whitesmoke", stroke: "black" }),
            Go_Comany(go.TextBlock,
              {
                  font: "bold 12px Helvetica, bold Arial, sans-serif",
                  wrap: go.TextBlock.WrapFit,
                  margin: 5
              },
              new go.Binding("text", "", tooltipTextConverter))
          );

        myDiagram.nodeTemplate =
          Go_Comany(go.Node, "Auto",
            { deletable: false, toolTip: tooltiptemplate },
            new go.Binding("text", "name"),
            Go_Comany(go.Shape, "RoundedRectangle",
              {
                //   fill: "#3498db",
                //   stroke: null, strokeWidth: 0,
                  fill: null, stroke: "#3498db", strokeWidth: 2,
                  stretch: go.GraphObject.Fill,
                  alignment: go.Spot.Center
              }
            ),
            Go_Comany(go.TextBlock,
              {
                  font: "14px 黑体, Droid Serif, sans-serif",
                  textAlign: "center",
                  margin: new go.Margin(20, 8, 2, 8), maxSize: new go.Size(80, NaN)
              },
              new go.Binding("text", "name")),
            Go_Comany(go.Panel, { height: 40 },
            Go_Comany("TreeExpanderButton")
          )
        );

        // define the Link template
        myDiagram.linkTemplate =
          Go_Comany(go.Link,  // the whole link panel
            { routing: go.Link.Orthogonal, corner: 5, selectable: false },
            Go_Comany(go.Shape, { strokeWidth: 3, stroke: '#424242' }));  // the gray link shape

        var nodeDataArray = data;

        // create the model for the family tree
        myDiagram.model = new go.TreeModel(nodeDataArray);
        myOverview =
        Go_Comany(go.Overview, "myOverviewDiv",  // the HTML DIV element for the Overview
            { observed: myDiagram, contentAlignment: go.Spot.Center });   // tell it which Diagram to show and pan

        document.getElementById('zoomToFit').addEventListener('click', function () {
            myDiagram.zoomToFit();
        });

        document.getElementById('centerRoot').addEventListener('click', function () {
            myDiagram.scale = 1;
            myDiagram.scrollToRect(myDiagram.findNodeForKey(0).actualBounds);
        });
    }

</script>